/* $Id: via.h,v 1.8 2014/02/22 15:07:12 prs Exp $ */
/* ld --dynamic-linker /lib/ld-linux.so.2 -lc -o program program.o */
#ifndef _via_h_
#define _via_h_

#define viaCONST viaINTEGER
#define viaINT viaIMM
#define viaDUP viaCOPY
#define viaDUP2 viaCOPY2

#if defined(viaDEBUG)

#define viaCOMM "COMM %s\n"
#define viaNOP "NOP\n"
#define viaIMM "IMM %d\n"
#define viaADD "ADD\n"
#define viaSUB "SUB\n"
#define viaMUL "MUL\n"
#define viaDIV "DIV\n"
#define viaMOD "MOD\n"
#define viaNEG "NEG\n"
#define viaINCR "INCR %d\n"
#define viaDECR "DECR %d\n"
#define viaGT "GT\n"
#define viaGE "GE\n"
#define viaLT "LT\n"
#define viaLE "LE\n"
#define viaEQ "EQ\n"
#define viaNE "NE\n"
#define viaAND "AND\n"
#define viaOR "OR\n"
#define viaXOR "XOR\n"
#define viaNOT "NOT\n"
#define viaROTL "ROTL\n"
#define viaROTR "ROTR\n"
#define viaSHTL "SHTL\n"
#define viaSHTRU "SHTRU\n"
#define viaSHTRS "SHTRS\n"
#define viaLOCAL "LOCAL %d\n"
#define viaADDR "ADDR %s\n"
#define viaLOCV "LOCV %d\n"
#define viaADDRV "ADDRV %s\n"
#define viaLOCA "LOCA %d\n"
#define viaADDRA "ADDRA %s\n"
#define viaLOAD "LOAD\n"
#define viaSTORE "STORE\n"
#define viaLDCHR "LDCHR\n"
#define viaSTCHR "STCHR\n"
#define viaLD16 "LD16\n"
#define viaST16 "ST16\n"
#define viaENTER "ENTER %d\n"
#define viaSTART "START\n"
#define viaALLOC "ALLOC\n"
#define viaLEAVE "LEAVE\n"
#define viaTRASH "TRASH %d\n"
#define viaCALL "CALL %s\n"
#define viaRET "RET\n"
#define viaRETN "RETN %d\n"
#define viaBRANCH "BRANCH\n"
#define viaLEAP "LEAP\n"
#define viaJMP "JMP %s\n"
#define viaJZ "JZ %s\n"
#define viaJNZ "JNZ %s\n"
#define viaCOPY "COPY\n"
#define viaSWAP "SWAP\n"
#define viaSP "SP\n"
#define viaPUSH "PUSH\n"
#define viaPOP "POP\n"
#define viaI2D "I2D\n"
#define viaF2D "F2D\n"
#define viaD2I "D2I\n"
#define viaD2F "D2F\n"
#define viaDADD "DADD\n"
#define viaDSUB "DSUB\n"
#define viaDMUL "DMUL\n"
#define viaDDIV "DDIV\n"
#define viaDCMP "DCMP\n"
#define viaDNEG "DNEG\n"
#define viaLOAD2 "LOAD2\n"
#define viaSTORE2 "STORE2\n"
#define viaCOPY2 "COPY2\n"
#define viaDPUSH "DPUSH\n"
#define viaDPOP "DPOP\n"
#define viaNIL "NIL\n"
#define viaBEGIN "BEGIN %s\n"
#define viaEND "END\n"
#define viaTEXT "TEXT\n"
#define viaRODATA "RODATA\n"
#define viaDATA "DATA\n"
#define viaBSS "BSS\n"
#define viaALIGN "ALIGN\n"
#define viaEXTRN "EXTRN %s\n"
#define viaCOMMON "COMMON %d\n"
#define viaGLOBL "GLOBL %s %s\n"
#define viaLABEL "LABEL %s\n"
#define viaINTEGER "INTEGER %d\n"
#define viaSHORT "SHORT %d\n"
#define viaLONG "LONG %lld\n"
#define viaSTR "STR \"%s\"\n"
#define viaCHAR "CHAR 0x%2.2X\n"
#define viaID "ID %s\n"
#define viaBYTE "BYTE %d\n"
#define viaFLOAT "FLOAT %e\n"
#define viaDOUBLE "DOUBLE %e\n"
#define viaULDCHR "ULDCHR\n"
#define viaULD16 "ULD16\n"
#define viaUDIV "UDIV\n"
#define viaUMOD "UMOD\n"
#define viaUGT "UGT\n"
#define viaUGE "UGE\n"
#define viaULT "ULT\n"
#define viaULE "ULE\n"
#define viaJEQ "JEQ %s\n"
#define viaJNE "JNE %s\n"
#define viaJGT "JGT %s\n"
#define viaJGE "JGE %s\n"
#define viaJLT "JLT %s\n"
#define viaJLE "JLE %s\n"
#define viaJUGT "JUGT %s\n"
#define viaJUGE "JUGE %s\n"
#define viaJULT "JULT %s\n"
#define viaJULE "JULE %s\n"

#define viaLD64 "LD64\n"
#define viaST64 "ST64\n"
#define viaULD64 "ULD64\n"
#define viaLD32 viaLOAD
#define viaST32 viaSTORE
#define viaULD32 viaLOAD

#elif defined(viaARM)

#define viaCOMM "@ COMM %s\n"
#define viaNOP "@ NOP\n\tnop\n"
#define viaIMM "@ IMM\n\tldr\tr0, =%d\n\tpush\t{r0}\n"
#define viaADD "@ ADD\n\tpop\t{r0,r1}\n\tadd\tr0, r1, r0\n\tpush\t{r0}\n"
#define viaSUB "@ SUB\n\tpop\t{r0,r1}\n\tsub\tr0, r1, r0\n\tpush\t{r0}\n"
#define viaMUL "@ MUL\n\tpop\t{r0,r1}\n\tmul\tr0, r1, r0\n\tpush\t{r0}\n"
#define viaDIV "@ DIV\n\tpop\t{r1}\n\tpop\t{r0}\n\tbl\t_div\n\tpush\t{r0}\n"
#define viaMOD "@ MOD\n\tpop\t{r1}\n\tpop\t{r0}\n\tbl\t_mod\n\tpush\t{r0}\n"
#define viaNEG "@ NEG\n\tpop\t{r0}\n\trsb\tr0, r0, #0\n\tpush\t{r0}\n"
#define viaINCR "@ INCR\n\tpop\t{r0}\n\tldr\tr1, [r0]\n\tldr\tr2, =%d\n\tadd\tr1, r1, r2\n\tstr\tr1, [r0]\n"
#define viaDECR "@ DECR\n\tpop\t{r0}\n\tldr\tr1, [r0]\n\tldr\tr2, =%d\n\tsub\tr1, r1, r2\n\tstr\tr1, [r0]\n"
#define viaGT "@ GT\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmovgt\tr0, #1\n\tmovle\tr0, #0\n\tpush\t{r0}\n"
#define viaGE "@ GE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmovge\tr0, #1\n\tmovlt\tr0, #0\n\tpush\t{r0}\n"
#define viaLT "@ LT\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmovlt\tr0, #1\n\tmovge\tr0, #0\n\tpush\t{r0}\n"
#define viaLE "@ LE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmovle\tr0, #1\n\tmovgt\tr0, #0\n\tpush\t{r0}\n"
#define viaEQ "@ EQ\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmoveq\tr0, #1\n\tmovne\tr0, #0\n\tpush\t{r0}\n"
#define viaNE "@ NE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmovne\tr0, #1\n\tmoveq\tr0, #0\n\tpush\t{r0}\n"
#define viaAND "@ AND\n\tpop\t{r0,r1}\n\tand\tr0, r0, r1\n\tpush\t{r0}\n"
#define viaOR "@ OR\n\tpop\t{r0,r1}\n\torr\tr0, r0, r1\n\tpush\t{r0}\n"
#define viaXOR "@ XOR\n\tpop\t{r0,r1}\n\teor\tr0, r0, r1\n\tpush\t{r0}\n"
#define viaNOT "@ NOT\n\tpop\t{r0}\n\tmvn\tr0, r0\n\tpush\t{r0}\n"
#define viaROTL "@ ROTL\n\tpop\t{r0,r1}\n\trsb\tr0, r0, #32\n\tmov\tr0, r0, ror r1\n\tpush\t{r0}\n"
#define viaROTR "@ ROTR\n\tpop\t{r0,r1}\n\tmov\tr0, r0, ror r1\n\tpush\t{r0}\n"
#define viaSHTL "@ SHTL\n\tpop\t{r0,r1}\n\tmov\tr0, r0, lsl r1\n\tpush\t{r0}\n"
#define viaSHTRU "@ SHTRU\n\tpop\t{r0,r1}\n\tmov\tr0, r0, lsr r1\n\tpush\t{r0}\n"
#define viaSHTRS "@ SHTRS\n\tpop\t{r0,r1}\n\tmov\tr0, r0, asr r1\n\tpush\t{r0}\n"
#define viaLOCAL "@ LOCAL\n\tldr\tr0, =%d\n\tadd\tr0, fp, r0\n\tpush\t{r0}\n"
#define viaADDR "@ ADDR\n\tldr\tr0, =%s\n\tpush\t{r0}\n"
#define viaLOCV "@ LOCV\n\tldr\tr0, =%d\n\tldr\tr0, [fp, r0]\n\tpush\t{r0}\n"
#define viaADDRV "@ ADDRV\n\tldr\tr0, =%s\n\tldr\tr0, [r0]\n\tpush\t{r0}\n"
#define viaLOCA "@ LOCA\n\tpop\t{r1}\n\tldr\tr0, =%d\n\tstr\tr1, [fp, r0]\n"
#define viaADDRA "@ ADDRA\n\tpop\t{r1}\n\tldr\tr0, =%s\n\tstr\tr1, [r0]\n"
#define viaLOAD "@ LOAD\n\tpop\t{r0}\n\tldr\tr0, [r0]\n\tpush\t{r0}\n"
#define viaSTORE "@ STORE\n\tpop\t{r0,r1}\n\tstr\tr1, [r0]\n"
#define viaLDCHR "@ LDCHR\n\tpop\t{r0}\n\tldrsb\tr0, [r0]\n\tpush\t{r0}\n"
#define viaSTCHR "@ STCHR\n\tpop\t{r0,r1}\n\tstrb\tr1, [r0]\n"
#define viaLD16 "@ LD16\n\tpop\t{r0}\n\tldrsh\tr0, [r0]\n\tpush\t{r0}\n"
#define viaST16 "@ ST16\n\tpop\t{r0,r1}\n\tstrh\tr1, [r0]\n"
#define viaENTER "@ ENTER\n\tpush\t{lr}\n\tpush\t{fp}\n\tmov\tfp, sp\n\tldr\tr0, =%d\n\tsub\tsp, sp, r0\n"
#define viaSTART "@ START\n\tpush\t{lr}\n\tpush\t{fp}\n\tmov\tfp, sp\n"
#define viaALLOC "@ ALLOC\n\tpop\t{r0}\n\tsub\tsp, sp, r0\n"
#define viaLEAVE "@ LEAVE\n\tmov\tsp, fp\n\tpop\t{fp}\n"
#define viaTRASH "@ TRASH\n\tldr\tr2, =%d\n\tadd\tsp, sp, r2\n"
#define viaCALL "@ CALL\n\tbl\t%s\n"
#define viaRET "@ RET\n\tpop\t{pc}\n"
#define viaRETN "@ RETN\n\tpop\t{lr}\n\tldr\tr2, =%d\n\tadd\tsp, sp, r2\n\tbx\tlr\n"
#define viaBRANCH "@ BRANCH\n\tmov\trl, pc\n\tpop\t{pc}\n"
#define viaLEAP "@ LEAP\n\tpop\t{pc}\n"
#define viaJMP "@ JMP\n\tb\t%s\n"
#define viaJZ "@ JZ\n\tpop\t{r0}\n\tcmp\tr0, #0\n\tbeq\t%s\n"
#define viaJNZ "@ JNZ\n\tpop\t{r0}\n\tcmp\tr0, #0\n\tbne\t%s\n"
#define viaCOPY "@ COPY\n\tpop\t{r0}\n\tpush\t{r0}\n\tpush\t{r0}\n"
#define viaSWAP "@ SWAP\n\tpop\t{r0,r1}\n\tpush\t{r0}\n\tpush\t{r1}\n"
#define viaSP "@ SP\n\tpush\t{sp}\n"
#define viaPUSH "@ PUSH\n\tpush\t{r0}\n"
#define viaPOP "@ POP\n\tpop\t{r0}\n"
#define viaI2D "@ I2D\n\tpop\t{r0}\n\tbl\t_i2d\n\tpush\t{r0,r1}\n"
#define viaF2D "@ F2D\n\tpop\t{r0}\n\tbl\t_f2d\n\tpush\t{r0,r1}\n"
#define viaD2I "@ D2I\n\tpop\t{r0,r1}\n\tbl\t_d2i\n\tpush\t{r0}\n"
#define viaD2F "@ D2F\n\tpop\t{r0,r1}\n\tbl\t_d2f\n\tpush\t{r0}\n"
#define viaDADD "@ DADD\n\tpop\t{r0,r1,r2,r3}\n\tbl\t_dadd\n\tpush\t{r0,r1}\n"
#define viaDSUB "@ DSUB\n\tpop\t{r0,r1,r2,r3}\n\tbl\t_dsub\n\tpush\t{r0,r1}\n"
#define viaDMUL "@ DMUL\n\tpop\t{r0,r1,r2,r3}\n\tbl\t_dmul\n\tpush\t{r0,r1}\n"
#define viaDDIV "@ DDIV\n\tpop\t{r0,r1,r2,r3}\n\tbl\t_ddiv\n\tpush\t{r0,r1}\n"
#define viaDCMP "@ DCMP\n\tpop\t{r0,r1,r2,r3}\n\tbl\t_dcmp\n\tpush\t{r0}\n"
#define viaDNEG "@ DNEG\n\tpop\t{r0,r1}\n\tbl\t_dneg\n\tpush\t{r0,r1}\n"
#define viaLOAD2 "@ LOAD2\n\tpop\t{r0}\n\tldr\tr1, [r0, #4]\n\tldr\tr0, [r0]\n\tpush\t{r0,r1}\n"
#define viaSTORE2 "@ STORE2\n\tpop\t{r0,r1,r2}\n\tstr\tr1, [r0]\n\tstr\tr2, [r0, #4]\n"
#define viaCOPY2 "@ COPY2\n\tldr\tr0, [sp, #4]\n\tpush\t{r0}\n\tldr\tr0, [sp, #4]\n\tpush\t{r0}\n"
#define viaDPUSH "@ DPUSH\n\tpush\t{r0,r1}\n"
#define viaDPOP "@ DPOP\n\tpop\t{r0,r1}\n"
#define viaNIL "@ NIL\n"
#define viaBEGIN "@ BEGIN\n\t.file \"%s\"\n"
#define viaEND "@ END\n"
#define viaTEXT "@ TEXT\n.section\t.text\n"
#define viaRODATA "@ RODATA\n.section\t.rodata\n"
#define viaDATA "@ DATA\n.section\t.data\n"
#define viaBSS "@ BSS\n.section\t.bss\n"
#define viaALIGN "@ ALIGN\n.align\t4\n"
#define viaEXTRN "@ EXTRN\n.extern\t%s\n"
#define viaCOMMON "@ COMMON\n.comm\t%s,4\n"
#define viaGLOBL "@ GLOBL\n.global\t%s%s\n"
#define viaLABEL "@ LABEL\n%s:\n"
#define viaINTEGER "@ INTEGER\n\t.word\t%d\n"
#define viaSHORT "@ SHORT\n\t.short\t%d\n"
#define viaLONG "@ LONG\n\t.word\t%d\n\t.word\t%d\n"
#define viaSTR "@ STR\n\t.asciz\t\"%s\"\n"
#define viaCHAR "@ CHAR\n\t.byte\t0x%2.2X\n"
#define viaID "@ ID\n\t.word\t%s\n"
#define viaBYTE "@ BYTE\n\t.space\t%d\n"
#define viaFLOAT "@ FLOAT\n\t.float\t0f%g\n"
#define viaDOUBLE "@ DOUBLE\n\t.double\t0d%15.15e\n"
#define viaULDCHR "@ ULDCHR\n\tpop\t{r0}\n\tldrb\tr0, [r0]\n\tpush\t{r0}\n"
#define viaULD16 "@ ULD16\n\tpop\t{r0}\n\tldrh\tr0, [r0]\n\tpush\t{r0}\n"
#define viaUDIV "@ UDIV\n\tpop\t{r1}\n\tpop\t{r0}\n\tbl\t_udiv\n\tpush\t{r0}\n"
#define viaUMOD "@ UMOD\n\tpop\t{r1}\n\tpop\t{r0}\n\tbl\t_umod\n\tpush\t{r0}\n"
#define viaUGT "@ UGT\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmovls\tr0, #1\n\tmovhi\tr0, #0\n\tpush\t{r0}\n"
#define viaUGE "@ UGE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmovcc\tr0, #1\n\tmovcs\tr0, #0\n\tpush\t{r0}\n"
#define viaULT "@ ULT\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmovcs\tr0, #1\n\tmovcc\tr0, #0\n\tpush\t{r0}\n"
#define viaULE "@ ULE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tmovhi\tr0, #1\n\tmovls\tr0, #0\n\tpush\t{r0}\n"
#define viaJEQ "@ JEQ\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tbeq\t%s\n"
#define viaJNE "@ JNE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tbne\t%s\n"
#define viaJGT "@ JGT\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tbgt\t%s\n"
#define viaJGE "@ JGE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tbge\t%s\n"
#define viaJLT "@ JLT\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tblt\t%s\n"
#define viaJLE "@ JLE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tble\t%s\n"
#define viaJUGT "@ JUGT\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tbls\t%s\n"
#define viaJUGE "@ JUGE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tbcc\t%s\n"
#define viaJULT "@ JULT\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tbcs\t%s\n"
#define viaJULE "@ JULE\n\tpop\t{r0,r1}\n\tcmp\tr1, r0\n\tbhi\t%s\n"

#define viaLD64 "@ LD64\n"
#define viaST64 "@ ST64\n"
#define viaULD64 "@ ULD64\n"
#define viaLD32 viaLOAD
#define viaST32 viaSTORE
#define viaULD32 viaLOAD

#define viaARG1	"; ARG1\n\tldr\tr0, [sp]\n"
#define viaARG2	"; ARG2\n\tldr\tr1, [sp,#4]\n"
#define viaARG3	"; ARG3\n\tldr\tr2, [sp,#8]\n"
#define viaARG4	"; ARG4\n\tldr\tr3, [sp,#12]\n"
#define viaARG1D	"; ARG1D\n\tldr\tr0, [sp]\n\tldr\tr1, [sp,#4]\n"
#define viaARG2D	"; ARG2D\n\tldr\tr0, [sp,#8]\n\tldr\tr1, [sp,#12]\n"

#elif defined(viaAMD64)
#define viaWORD 8

#define viaCOMM "; COMM %s\n"
#define viaNOP "; NOP\n\tnop\n"
#define viaIMM "; IMM\n\tmov\trax, qword %lld\n\tpush\trax\n" /* only MOVs accept 64-bit immediates */
#define viaADD "; ADD\n\tpop\trax\n\tadd\tqword [rsp], rax\n"
#define viaSUB "; SUB\n\tpop\trax\n\tsub\tqword [rsp], rax\n"
#define viaMUL "; MUL\n\tpop\trax\n\timul\tqword rax, [rsp]\n\tmov\t[rsp], rax\n"
#define viaDIV "; DIV\n\tpop\trcx\n\tpop\trax\n\tmov\trdx, rax\n\tsar\trdx, 63\n\tidiv\trcx\n\tpush\trax\n"
#define viaMOD "; MOD\n\tpop\trcx\n\tpop\trax\n\tmov\trdx, rax\n\tsar\trdx, 63\n\tidiv\trcx\n\tpush\trdx\n"
#define viaNEG "; NEG\n\tneg\tqword [rsp]\n"
#define viaINCR "; INCR\n\tpop\trax\n\tadd\tqword [rax], %d\n"
#define viaDECR "; DECR\n\tpop\trax\n\tsub\tqword [rax], %d\n"
#define viaGT "; GT\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tsetg\tcl\n\tmov\t[rsp], rcx\n"
#define viaGE "; GE\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tsetge\tcl\n\tmov\t[rsp], rcx\n"
#define viaLT "; LT\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tsetl\tcl\n\tmov\t[rsp], rcx\n"
#define viaLE "; LE\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tsetle\tcl\n\tmov\t[rsp], rcx\n"
#define viaEQ "; EQ\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tsete\tcl\n\tmov\t[rsp], rcx\n"
#define viaNE "; NE\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tsetne\tcl\n\tmov\t[rsp], rcx\n"
#define viaAND "; AND\n\tpop\trax\n\tand\tqword [rsp], rax\n"
#define viaOR "; OR\n\tpop\trax\n\tor\tqword [rsp], rax\n"
#define viaXOR "; XOR\n\tpop\trax\n\txor\tqword [rsp], rax\n"
#define viaNOT "; NOT\n\tnot\tqword [rsp]\n"
#define viaROTL "; ROTL\n\tpop\trcx\n\trol\tqword [rsp], cl\n"
#define viaROTR "; ROTR\n\tpop\trcx\n\tror\tqword [rsp], cl\n"
#define viaSHTL "; SHTL\n\tpop\trcx\n\tsal\tqword [rsp], cl\n"
#define viaSHTRU "; SHTRU\n\tpop\trcx\n\tshr\tqword [rsp], cl\n"
#define viaSHTRS "; SHTRS\n\tpop\trcx\n\tsar\tqword [rsp], cl\n"
#define viaLOCAL "; LOCAL\n\tlea\trax, [rbp+%d]\n\tpush\trax\n"
#define viaADDR "; ADDR\n\tmov\trax, $%s\n\tpush\trax\n"
#define viaLOCV "; LOCV\n\tpush\tqword [rbp+%d]\n"
#define viaADDRV "; ADDRV\n\tmov\trax, [abs qword $%s]\n\tpush\trax\n"
#define viaLOCA "; LOCA\n\tpop\trax\n\tmov\t[rbp+%d], rax\n"
#define viaADDRA "; ADDRA\n\tpop\trax\n\tmov\t[abs qword $%s], rax\n"
#define viaLOAD "; LOAD\n\tpop\trax\n\tpush\tqword [rax]\n"
#define viaSTORE "; STORE\n\tpop\trcx\n\tpop\trax\n\tmov\t[rcx], rax\n"
#define viaLDCHR "; LDCHR\n\tpop\trcx\n\tmovsx\trax,byte [rcx]\n\tpush\trax\n"
#define viaSTCHR "; STCHR\n\tpop\trcx\n\tpop\trax\n\tmov\t[rcx], al\n"
#define viaLD16 "; LD16\n\tpop\trcx\n\tmovsx\trax,word [rcx]\n\tpush\trax\n"
#define viaST16 "; ST16\n\tpop\trcx\n\tpop\trax\n\tmov\t[rcx], ax\n"
#define viaENTER "; ENTER\n\tpush\trbp\n\tmov\trbp, rsp\n\tsub\trsp, %d\n"
#define viaSTART "; START\n\tpush\trbp\n\tmov\trbp, rsp\n"
#define viaALLOC "; ALLOC\n\tpop\trax\n\tsub\trsp, rax\n"
#define viaLEAVE "; LEAVE\n\tleave\n"
#define viaTRASH "; TRASH\n\tadd\trsp, %d\n"
#define viaCALL "; CALL\n\tcall\t$%s\n"
#define viaRET "; RET\n\tret\n"
#define viaRETN "; RETN\n\tret\t%d\n"
#define viaBRANCH "; BRANCH\n\tpop\trax\n\tcall\trax\n"
#define viaLEAP "; LEAP\n\tpop\trax\n\tjmp\trax\n"
#define viaJMP "; JMP\n\tjmp\t$%s\n"
#define viaJZ "; JZ\n\tpop\trax\n\tcmp\trax, byte 0\n\tje\tnear $%s\n"
#define viaJNZ "; JNZ\n\tpop\trax\n\tcmp\trax, byte 0\n\tjne\tnear $%s\n"
#define viaCOPY "; COPY\n\tpush\tqword [rsp]\n"
#define viaSWAP "; SWAP\n\tpop\trax\n\tpop\trcx\n\tpush\trax\n\tmov\trax, rcx\n\tpush\trax\n"
#define viaSP "; SP\n\tpush\trsp\n"
#define viaPUSH "; PUSH\n\tpush\trax\n"
#define viaPOP "; POP\n\tpop\trax\n"
#define viaI2D "; I2D\n\tfild\tqword [rsp]\n\tsub\trsp, byte 4\n\tfstp\tqword [rsp]\n"
#define viaF2D "; F2D\n\tfld\tqword [rsp]\n\tsub\trsp, byte 4\n\tfstp\tqword [rsp]\n"
#define viaD2I "; D2I\n\tfld\tqword [rsp]\n\tadd\trsp, byte 4\n\tfistp\tqword [rsp]\n"
#define viaD2F "; D2F\n\tfld\tqword [rsp]\n\tadd\trsp, byte 4\n\tfstp\tqword [rsp]\n"
#define viaDADD "; DADD\n\tfld\tqword [rsp]\n\tadd\trsp, byte 8\n\tfld\tqword [rsp]\n\tfaddp\tst1\n\tfstp\tqword [rsp]\n"
#define viaDSUB "; DSUB\n\tfld\tqword [rsp]\n\tadd\trsp, byte 8\n\tfld\tqword [rsp]\n\tfsubrp\tst1\n\tfstp\tqword [rsp]\n"
#define viaDMUL "; DMUL\n\tfld\tqword [rsp]\n\tadd\trsp, byte 8\n\tfld\tqword [rsp]\n\tfmulp\tst1\n\tfstp\tqword [rsp]\n"
#define viaDDIV "; DDIV\n\tfld\tqword [rsp]\n\tadd\trsp, byte 8\n\tfld\tqword [rsp]\n\tfdivrp\tst1\n\tfstp\tqword [rsp]\n"
#define viaDCMP "; DCMP\n\tfld\tqword [rsp+8]\n\tfld\tqword [rsp]\n\tadd\trsp, byte 12\n\tfsubp\tst1\n\tfxtract\n\tffree\tst1\n\tfistp\tqword [rsp]\n"
#define viaDNEG "; DNEG\n\tfld\tqword [rsp]\n\tfchs\n\tfstp\tqword [rsp]\n"
#define viaLOAD2 "; LOAD2\n\tpop\trax\n\tpush\tqword [rax+4]\n\tpush\tqword [rax]\n"
#define viaSTORE2 "; STORE2\n\tpop\trcx\n\tpop\trax\n\tmov\t[rcx], rax\n\tpop\trax\n\tmov\t[rcx+4], rax\n"
#define viaCOPY2 "; COPY2\n\tpush\tqword [rsp+4]\n\tpush\tqword [rsp+4]\n"
#define viaDPUSH "; DPUSH\n\tsub\trsp, byte 8\n\tfstp\tqword [rsp]\n"
#define viaDPOP "; DPOP\n\tfld\tqword [rsp]\n\tadd\trsp, byte 8\n"
#define viaNIL "; NIL\n"
#define viaBEGIN "; BEGIN %s\n"
#define viaEND "; END\n"
#define viaTEXT "; TEXT\nsegment\t.text\n"
#define viaRODATA "; RODATA\nsegment\t.rodata\n"
#define viaDATA "; DATA\nsegment\t.data\n"
#define viaBSS "; BSS\nsegment\t.bss\n"
#define viaALIGN "; ALIGN\nalign\t8\n"
#define viaEXTRN "; EXTRN\nextern\t$%s\n"
#define viaCOMMON "; COMMON\Ncommon\t%d\n"
#define viaGLOBL "; GLOBL\nglobal\t$%s%s\n"
#define viaLABEL "; LABEL\n$%s:\n"
#define viaINTEGER "; INTEGER\n\tdd\t%d\n"
#define viaSHORT "; SHORT\n\tdw\t%d\n"
#define viaLONG "; LONG\n\tdq\t%lld\n"
#define viaSTR "; STR\n\tdb\t'%s', 0\n"
#define viaCHAR "; CHAR\n\tdb\t0x%2.2X\n"
#define viaID "; ID\n\tdq\t$%s\n"
#define viaBYTE "; BYTE\n\tresb\t%d\n"
#define viaFLOAT "; FLOAT\n\tdd\t%e\n"
#define viaDOUBLE "; DOUBLE\n\tdq\t%e\n"
#define viaULDCHR "; ULDCHR\n\tmovzx\trax,byte [rcx]\n"
#define viaULD16 "; ULD16\n\tmovzx\trax,word [rcx]\n"
#define viaUDIV "; UDIV\n\tpop\trcx\n\tpop\trax\n\txor\trdx, rdx\n\tidiv\trcx\n\tpush\trax\n"
#define viaUMOD "; UMOD\n\tpop\trcx\n\tpop\trax\n\txor\trdx, rdx\n\tidiv\trcx\n\tpush\trdx\n"
#define viaUGT "; UGT\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tseta\tcl\n\tmov\t[rsp], rcx\n"
#define viaUGE "; UGE\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tsetae\tcl\n\tmov\t[rsp], rcx\n"
#define viaULT "; ULT\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tsetb\tcl\n\tmov\t[rsp], rcx\n"
#define viaULE "; ULE\n\tpop\trax\n\txor\trcx, rcx\n\tcmp\t[rsp], rax\n\tsetbe\tcl\n\tmov\t[rsp], rcx\n"
#define viaJEQ "; JEQ\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tje\tnear $%s\n"
#define viaJNE "; JNE\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tjne\tnear $%s\n"
#define viaJGT "; JGT\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tjg\tnear $%s\n"
#define viaJGE "; JGE\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tjge\tnear $%s\n"
#define viaJLT "; JLT\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tjl\tnear $%s\n"
#define viaJLE "; JLE\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tjle\tnear $%s\n"
#define viaJUGT "; JUGT\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tja\tnear $%s\n"
#define viaJUGE "; JUGE\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tjae\tnear $%s\n"
#define viaJULT "; JULT\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tjbe\tnear $%s\n"
#define viaJULE "; JULE\n\tpop\trax\n\tpop\trcx\n\tcmp\trcx, rax\n\tjb\tnear $%s\n"

#define viaLD32 "; LD32\n\tpop\trcx\n\tmovsx\trax,dword [rcx]\n\tpush\trax\n" /* sign extend */
#define viaST32 "; ST32\n\tpop\trcx\n\tpop\trax\n\tmov\t[rcx], eax\n" /* truncate: does not save sign if number overflows 31-bits */
#define viaULD32 "; ULD32\n\tmovzx\trax, dword [rcx]\n" /* zero extend */
#define viaLD64 viaLOAD
#define viaST64 viaSTORE
#define viaULD64 viaLOAD

#define viaARG1	"; ARG1\n\tmov\trdi, [rsp+0]\n"
#define viaARG2	"; ARG2\n\tmov\trsi, [rsp+8]\n"
#define viaARG3	"; ARG3\n\tmov\trdx, [rsp+16]\n"
#define viaARG4	"; ARG4\n\tmov\tr10, [rsp+24]\n"
#define viaARG5	"; ARG5\n\tmov\tr8,  [rsp+32]\n"
#define viaARG6	"; ARG6\n\tmov\tr9,  [rsp+40]\n"
#define viaARG1D	"; ARG1D\n\tmov\txmm0, [rsp+0]\n"
#define viaARG2D	"; ARG2D\n\tmov\txmm1, [rsp+8]\n"
#define viaARG3D	"; ARG3D\n\tmov\txmm2, [rsp+16]\n"
#define viaARG4D	"; ARG4D\n\tmov\txmm3, [rsp+24]\n"
#define viaARG5D	"; ARG5D\n\tmov\txmm4, [rsp+32]\n"
#define viaARG6D	"; ARG6D\n\tmov\txmm5, [rsp+40]\n"

#elif defined(viaI386GAS)

#define viaCOMM "# COMM %s\n"
#define viaNOP "# NOP\n\tnop\n"
#define viaIMM "# IMM\n\tpushl\t$%d\n"
#define viaADD "# ADD\n\tpopl\t%%eax\n\taddl\t%%eax, (%%esp)\n"
#define viaSUB "# SUB\n\tpopl\t%%eax\n\tsubl\t%%eax, (%%esp)\n"
#define viaMUL "# MUL\n\tpopl\t%%eax\n\timull\t(%%esp), %%eax\n\tmovl\t%%eax, (%%esp)\n"
#define viaDIV "# DIV\n\tpopl\t%%ecx\n\tpopl\t%%eax\n\tcltd\n\tidivl\t%%ecx\n\tpushl\t%%eax\n"
#define viaMOD "# MOD\n\tpopl\t%%ecx\n\tpopl\t%%eax\n\tcltd\n\tidivl\t%%ecx\n\tpushl\t%%edx\n"
#define viaNEG "# NEG\n\tnegl\t(%%esp)\n"
#define viaINCR "# INCR\n\tpopl\t%%eax\n\taddl\t$%d, (%%eax)\n"
#define viaDECR "# DECR\n\tpopl\t%%eax\n\tsubl\t$%d (%%eax)\n"
#define viaGT "# GT\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmp\t%%eax, (%%esp)\n\tsetg\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaGE "# GE\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmp\t%%eax, (%%esp)\n\tsetge\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaLT "# LT\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmp\t%%eax, (%%esp)\n\tsetl\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaLE "# LE\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmp\t%%eax, (%%esp)\n\tsetle\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaEQ "# EQ\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmp\t%%eax, (%%esp)\n\tsete\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaNE "# NE\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmp\t%%eax, (%%esp)\n\tsetne\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaAND "# AND\n\tpopl\t%%eax\n\tandl\t%%eax, (%%esp)\n"
#define viaOR "# OR\n\tpopl\t%%eax\n\torl\t%%eax, (%%esp)\n"
#define viaXOR "# XOR\n\tpopl\t%%eax\n\txorl\t%%eax, (%%esp)\n"
#define viaNOT "# NOT\n\tnotl\t(%%esp)\n"
#define viaROTL "# ROTL\n\tpopl\t%%ecx\n\troll\t%%cl, (%%esp)\n"
#define viaROTR "# ROTR\n\tpopl\t%%ecx\n\trorl\t%%cl, (%%esp)\n"
#define viaSHTL "# SHTL\n\tpopl\t%%ecx\n\tsall\t%%cl, (%%esp)\n"
#define viaSHTRU "# SHTRU\n\tpopl\t%%ecx\n\tshrl\t%%cl, (%%esp)\n"
#define viaSHTRS "# SHTRS\n\tpopl\t%%ecx\n\tsarl\t%%cl, (%%esp)\n"
#define viaLOCAL "# LOCAL\n\tleal\t(%%ebp+$%d), %%eax\n\tpushl\t%%eax\n"
#define viaADDR "# ADDR\n\tpushl\t$%s\n"
#define viaLOCV "# LOCV\n\tpushl\t$%d(%%ebp)\n"
#define viaADDRV "# ADDRV\n\tpushl\t(%s)\n"
#define viaLOCA "# LOCA\n\tpopl\t%%eax\n\tmovl\t%%eax, $%d(%%ebp)\n"
#define viaADDRA "# ADDRA\n\tpopl\t%%eax\n\tmovl\t%%eax, (%s)\n"
#define viaLOAD "# LOAD\n\tpopl\t%%eax\n\tpushl\t(%%eax)\n"
#define viaSTORE "# STORE\n\tpopl\t%%ecx\n\tpopl\t%%eax\n\tmovl\t%%eax, (%%ecx)\n"

#define viaLDCHR "# LDCHR\n\tpopl\t%%ecx\n\tmovsbl\t(%%ecx), %%eax\n\tpushl\t%%eax\n"
#define viaSTCHR "# STCHR\n\tpopl\t%%ecx\n\tpopl\t%%eax\n\tmovb\t%%al, (%%ecx)\n"
#define viaLD16 "# LD16\n\tpopl\t%%ecx\n\tmovsbw\t(%%ecx), %eax\n\tpushl\t%%eax\n"
#define viaST16 "# ST16\n\tpopl\t%%ecx\n\tpopl\t%%eax\n\tmovw\t%%ax, (%%ecx)\n"
#define viaENTER "# ENTER\n\tpushl\t%%ebp\n\tmovl\t%%esp, %%ebp\n\tsubl\t$%d, %%esp\n"
#define viaSTART "# START\n\tpushl\t%%ebp\n\tmovl\t%%esp, %%ebp\n"
#define viaALLOC "# ALLOC\n\tpopl\t%%eax\n\tsubl\t%%eax, %%esp\n"
#define viaLEAVE "# LEAVE\n\tleave\n"
#define viaTRASH "# TRASH\n\tadd\t$%d, %%esp\n"
#define viaCALL "# CALL\n\tcall\t%s\n"
#define viaRET "# RET\n\tret\n"
#define viaRETN "# RETN\n\tret\t$%d\n"
#define viaBRANCH "# BRANCH\n\tpopl\t%%eax\n\tcall\t%%eax\n"
#define viaLEAP "# LEAP\n\tpopl\t%%eax\n\tjmp\t%%eax\n"
#define viaJMP "# JMP\n\tjmp\t%s\n"
#define viaJZ "# JZ\n\tpopl\t%%eax\n\tcmpl\t$0, %%eax\n\tje\t%s\n"
#define viaJNZ "# JNZ\n\tpopl\t%%eax\n\tcmpl\t$0, %%eax\n\tjne\t%s\n"
#define viaCOPY "# COPY\n\tpushl\t(%%esp)\n"
#define viaSWAP "# SWAP\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tpushl\t%%eax\n\tpushl\t%%ecx\n"
#define viaSP "# SP\n\tpushl\t%%esp\n"
#define viaPUSH "# PUSH\n\tpushl\t%%eax\n"
#define viaPOP "# POP\n\tpopl\t%%eax\n"
#define viaI2D "# I2D\n\tfildl\t(%%esp)\n\tsubl\t$4, %%esp\n\tfstpl\t(%%esp)\n"
#define viaF2D "# F2D\n\tflds\t(%%esp)\n\tsubl\t$4, %%esp\n\tfstpl\t(%%esp)\n"
#define viaD2I "# D2I\n\tfldl\t(%%esp)\n\taddl\t$4, %%esp\n\tfistpl\t(%%esp)\n"
#define viaD2F "# D2F\n\tfldl\t(%%esp)\n\taddl\t$4, %%esp\n\tfstps\t(%%esp)\n"
#define viaDADD "# DADD\n\tfldl\t(%%esp)\n\taddl\t$8, %%esp\n\tfldl\t(%%esp)\n\tfaddp\t%%st(1)\n\tfstpl\t(%%esp)\n"
#define viaDSUB "# DSUB\n\tfldl\t(%%esp)\n\taddl\t$8, %%esp\n\tfldl\t(%%esp)\n\tfsubp\t%%st(1)\n\tfstpl\t(%%esp)\n"
#define viaDMUL "# DMUL\n\tfldl\t(%%esp)\n\taddl\t$8, %%esp\n\tfldl\t(%%esp)\n\tfmulp\t%%st(1)\n\tfstpl\t(%%esp)\n"
#define viaDDIV "# DDIV\n\tfldl\t(%%esp)\n\taddl\t$8, %%esp\n\tfldl\t(%%esp)\n\tfdivp\t%%st(1)\n\tfstpl\t(%%esp)\n"
#define viaDCMP "# DCMP\n\tfldl\t8(%%esp)\n\tfldl\t(%%esp)\n\taddl\t$12, %%esp\n\tfsubp\t%%st(1)\n\tfxtract\n\tffree\t%%st(1)\n\tfistpl\t(%%esp)\n"
#define viaDNEG "# DNEG\n\tfldl\t(%%esp)\n\tfchs\n\tfstpl\t(%%esp)\n"
#define viaLOAD2 "# LOAD2\n\tpopl\t%%eax\n\tpushl\t4(%%eax)\n\tpushl\t(%%eax)\n"
#define viaSTORE2 "# STORE2\n\tpopl\t%%ecx\n\tpopl\t%%eax\n\tmovl\t%%eax, (%%ecx)\n\tpopl\t%%eax\n\tmovl\t%%eax, 4(%%ecx)\n"
#define viaCOPY2 "# COPY2\n\tpushl\t4(%%esp)\n\tpushl\t4(%%esp)\n"
#define viaDPUSH "# DPUSH\n\tsubl\t$8, %%esp\n\tfstpl\t(%%esp)\n"
#define viaDPOP "# DPOP\n\tfldl\t(%%esp)\n\taddl\t$8, %%esp\n"
#define viaNIL "# NIL\n"
#define viaBEGIN "# BEGIN %s\n"
#define viaEND "# END\n"
#define viaTEXT "# TEXT\n.section\t.text\n"
#define viaRODATA "# RODATA\n.section\t.rodata\n"
#define viaDATA "# DATA\n.section\t.data\n"
#define viaBSS "# BSS\n.section\t.bss\n"
#define viaALIGN "# ALIGN\n.align\t4\n"
#define viaEXTRN "# EXTRN\n.extern\t%s\n"
#define viaCOMMON "# COMMON\N.common\t$%d\n"
#define viaGLOBL "# GLOBL\n.globl\t%s\t# %s\n"
#define viaLABEL "# LABEL\n%s:\n"
#define viaINTEGER "# INTEGER\n\t.int\t%d\n"
#define viaSHORT "# SHORT\n\t.short\t%d\n"
#define viaLONG "# LONG\n\t.quad\t%lld\n" /* %Ld %lld %llu %ql %I64 ? */
#define viaSTR "# STR\n\t.asciz\t\"%s\"\n"
#define viaCHAR "# CHAR\n\t.byte\t0x%2.2X\n"
#define viaID "# ID\n\t.int\t%s\n"
#define viaBYTE "# BYTE\n\t.space\t%d\n"
#define viaFLOAT "# FLOAT\n\t.float\t%e\n"
#define viaDOUBLE "# DOUBLE\n\t.double\t%e\n"
#define viaULDCHR "# ULDCHR\n\tmovzxb\t%%eax, (%%ecx)\n"
#define viaULD16 "# ULD16\n\tmovzxw\t%%eax, (%%ecx)\n"
#define viaUDIV "# UDIV\n\tpopl\t%%ecx\n\tpopl\t%%eax\n\txor\t%%edx, %%edx\n\tidiv\t%%ecx\n\tpushl\t%%eax\n"
#define viaUMOD "# UMOD\n\tpopl\t%%ecx\n\tpopl\t%%eax\n\txor\t%%edx, %%edx\n\tidiv\t%%ecx\n\tpushl\t%%edx\n"
#define viaUGT "# UGT\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmpl\t%%eax, (%%esp)\n\tseta\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaUGE "# UGE\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmpl\t%%eax, (%%esp)\n\tsetae\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaULT "# ULT\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmpl\t%%eax, (%%esp)\n\tsetb\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaULE "# ULE\n\tpopl\t%%eax\n\txorl\t%%ecx, %%ecx\n\tcmpl\t%%eax, (%%esp)\n\tsetbe\t%%cl\n\tmovl\t%%ecx, (%%esp)\n"
#define viaJEQ "# JEQ\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tje %s\n"
#define viaJNE "# JNE\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tjne %s\n"
#define viaJGT "# JGT\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tjg %s\n"
#define viaJGE "# JGE\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tjge %s\n"
#define viaJLT "# JLT\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tjl %s\n"
#define viaJLE "# JLE\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tjle %s\n"
#define viaJUGT "# JUGT\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tja %s\n"
#define viaJUGE "# JUGE\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tjae %s\n"
#define viaJULT "# JULT\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tjbe %s\n"
#define viaJULE "# JULE\n\tpopl\t%%eax\n\tpopl\t%%ecx\n\tcmpl\t%%ecx, %%eax\n\tjb %s\n"

#define viaLD64 viaLOAD /* who cares if useful data is truncated! */
#define viaST64 "# ST64\n\tpopl\t%%ecx\n\tpopl\t%%eax\n\tmov\t(%%ecx), %%eax\n\tand %%eax, 0x80000000\n\tmov %%eax, 0\n\tmov %%edx, -1\n\tcmovnz %%eax, %%edx\n\tmov (%%ecx+4), %%eax\n" /* copy 32bit-sign to upper 32bits */
#define viaULD64 viaLOAD /* who cares if useful data is truncated! */
#define viaLD32 viaLOAD
#define viaST32 viaSTORE
#define viaULD32 viaLOAD

#else

#define viaCOMM "; COMM %s\n"
#define viaNOP "; NOP\n\tnop\n"
#define viaIMM "; IMM\n\tpush\tdword %d\n"
#define viaADD "; ADD\n\tpop\teax\n\tadd\tdword [esp], eax\n"
#define viaSUB "; SUB\n\tpop\teax\n\tsub\tdword [esp], eax\n"
#define viaMUL "; MUL\n\tpop\teax\n\timul\tdword eax, [esp]\n\tmov\t[esp], eax\n"
#define viaDIV "; DIV\n\tpop\tecx\n\tpop\teax\n\tcdq\n\tidiv\tecx\n\tpush\teax\n"
#define viaMOD "; MOD\n\tpop\tecx\n\tpop\teax\n\tcdq\n\tidiv\tecx\n\tpush\tedx\n"
#define viaNEG "; NEG\n\tneg\tdword [esp]\n"
#define viaINCR "; INCR\n\tpop\teax\n\tadd\tdword [eax], %d\n"
#define viaDECR "; DECR\n\tpop\teax\n\tsub\tdword [eax], %d\n"
#define viaGT "; GT\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tsetg\tcl\n\tmov\t[esp], ecx\n"
#define viaGE "; GE\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tsetge\tcl\n\tmov\t[esp], ecx\n"
#define viaLT "; LT\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tsetl\tcl\n\tmov\t[esp], ecx\n"
#define viaLE "; LE\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tsetle\tcl\n\tmov\t[esp], ecx\n"
#define viaEQ "; EQ\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tsete\tcl\n\tmov\t[esp], ecx\n"
#define viaNE "; NE\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tsetne\tcl\n\tmov\t[esp], ecx\n"
#define viaAND "; AND\n\tpop\teax\n\tand\tdword [esp], eax\n"
#define viaOR "; OR\n\tpop\teax\n\tor\tdword [esp], eax\n"
#define viaXOR "; XOR\n\tpop\teax\n\txor\tdword [esp], eax\n"
#define viaNOT "; NOT\n\tnot\tdword [esp]\n"
#define viaROTL "; ROTL\n\tpop\tecx\n\trol\tdword [esp], cl\n"
#define viaROTR "; ROTR\n\tpop\tecx\n\tror\tdword [esp], cl\n"
#define viaSHTL "; SHTL\n\tpop\tecx\n\tsal\tdword [esp], cl\n"
#define viaSHTRU "; SHTRU\n\tpop\tecx\n\tshr\tdword [esp], cl\n"
#define viaSHTRS "; SHTRS\n\tpop\tecx\n\tsar\tdword [esp], cl\n"
#define viaLOCAL "; LOCAL\n\tlea\teax, [ebp+%d]\n\tpush\teax\n"
#define viaADDR "; ADDR\n\tpush\tdword $%s\n"
#define viaLOCV "; LOCV\n\tpush\tdword [ebp+%d]\n"
#define viaADDRV "; ADDRV\n\tpush\tdword [$%s]\n"
#define viaLOCA "; LOCA\n\tpop\teax\n\tmov\t[ebp+%d], eax\n"
#define viaADDRA "; ADDRA\n\tpop\teax\n\tmov\t[$%s], eax\n"
#define viaLOAD "; LOAD\n\tpop\teax\n\tpush\tdword [eax]\n"
#define viaSTORE "; STORE\n\tpop\tecx\n\tpop\teax\n\tmov\t[ecx], eax\n"
#define viaLDCHR "; LDCHR\n\tpop\tecx\n\tmovsx\teax,byte [ecx]\n\tpush\teax\n"
#define viaSTCHR "; STCHR\n\tpop\tecx\n\tpop\teax\n\tmov\t[ecx], al\n"
#define viaLD16 "; LD16\n\tpop\tecx\n\tmovsx\teax,word [ecx]\n\tpush\teax\n"
#define viaST16 "; ST16\n\tpop\tecx\n\tpop\teax\n\tmov\t[ecx], ax\n"
#define viaENTER "; ENTER\n\tpush\tebp\n\tmov\tebp, esp\n\tsub\tesp, %d\n"
#define viaSTART "; START\n\tpush\tebp\n\tmov\tebp, esp\n"
#define viaALLOC "; ALLOC\n\tpop\teax\n\tsub\tesp, eax\n"
#define viaLEAVE "; LEAVE\n\tleave\n"
#define viaTRASH "; TRASH\n\tadd\tesp, %d\n"
#define viaCALL "; CALL\n\tcall\t$%s\n"
#define viaRET "; RET\n\tret\n"
#define viaRETN "; RETN\n\tret\t%d\n"
#define viaBRANCH "; BRANCH\n\tpop\teax\n\tcall\teax\n"
#define viaLEAP "; LEAP\n\tpop\teax\n\tjmp\teax\n"
#define viaJMP "; JMP\n\tjmp\tdword $%s\n"
#define viaJZ "; JZ\n\tpop\teax\n\tcmp\teax, byte 0\n\tje\tnear $%s\n"
#define viaJNZ "; JNZ\n\tpop\teax\n\tcmp\teax, byte 0\n\tjne\tnear $%s\n"
#define viaCOPY "; COPY\n\tpush\tdword [esp]\n"
#define viaSWAP "; SWAP\n\tpop\teax\n\tpop\tecx\n\tpush\teax\n\tmov\teax, ecx\n\tpush\teax\n"
#define viaSP "; SP\n\tpush\tesp\n"
#define viaPUSH "; PUSH\n\tpush\teax\n"
#define viaPOP "; POP\n\tpop\teax\n"
#define viaI2D "; I2D\n\tfild\tdword [esp]\n\tsub\tesp, byte 4\n\tfstp\tqword [esp]\n"
#define viaF2D "; F2D\n\tfld\tdword [esp]\n\tsub\tesp, byte 4\n\tfstp\tqword [esp]\n"
#define viaD2I "; D2I\n\tfld\tqword [esp]\n\tadd\tesp, byte 4\n\tfistp\tdword [esp]\n"
#define viaD2F "; D2F\n\tfld\tqword [esp]\n\tadd\tesp, byte 4\n\tfstp\tdword [esp]\n"
#define viaDADD "; DADD\n\tfld\tqword [esp]\n\tadd\tesp, byte 8\n\tfld\tqword [esp]\n\tfaddp\tst1\n\tfstp\tqword [esp]\n"
#define viaDSUB "; DSUB\n\tfld\tqword [esp]\n\tadd\tesp, byte 8\n\tfld\tqword [esp]\n\tfsubrp\tst1\n\tfstp\tqword [esp]\n"
#define viaDMUL "; DMUL\n\tfld\tqword [esp]\n\tadd\tesp, byte 8\n\tfld\tqword [esp]\n\tfmulp\tst1\n\tfstp\tqword [esp]\n"
#define viaDDIV "; DDIV\n\tfld\tqword [esp]\n\tadd\tesp, byte 8\n\tfld\tqword [esp]\n\tfdivrp\tst1\n\tfstp\tqword [esp]\n"
#define viaDCMP "; DCMP\n\tfld\tqword [esp+8]\n\tfld\tqword [esp]\n\tadd\tesp, byte 12\n\tfsubp\tst1\n\tfxtract\n\tffree\tst1\n\tfistp\tdword [esp]\n"
#define viaDNEG "; DNEG\n\tfld\tqword [esp]\n\tfchs\n\tfstp\tqword [esp]\n"
#define viaLOAD2 "; LOAD2\n\tpop\teax\n\tpush\tdword [eax+4]\n\tpush\tdword [eax]\n"
#define viaSTORE2 "; STORE2\n\tpop\tecx\n\tpop\teax\n\tmov\t[ecx], eax\n\tpop\teax\n\tmov\t[ecx+4], eax\n"
#define viaCOPY2 "; COPY2\n\tpush\tdword [esp+4]\n\tpush\tdword [esp+4]\n"
#define viaDPUSH "; DPUSH\n\tsub\tesp, byte 8\n\tfstp\tqword [esp]\n"
#define viaDPOP "; DPOP\n\tfld\tqword [esp]\n\tadd\tesp, byte 8\n"
#define viaNIL "; NIL\n"
#define viaBEGIN "; BEGIN %s\n"
#define viaEND "; END\n"
#define viaTEXT "; TEXT\nsegment\t.text\n"
#define viaRODATA "; RODATA\nsegment\t.rodata\n"
#define viaDATA "; DATA\nsegment\t.data\n"
#define viaBSS "; BSS\nsegment\t.bss\n"
#define viaALIGN "; ALIGN\nalign\t4\n"
#define viaEXTRN "; EXTRN\nextern\t$%s\n"
#define viaCOMMON "; COMMON\Ncommon\t%d\n"
#define viaGLOBL "; GLOBL\nglobal\t$%s%s\n"
#define viaLABEL "; LABEL\n$%s:\n"
#define viaINTEGER "; INTEGER\n\tdd\t%d\n"
#define viaSHORT "; SHORT\n\tdw\t%d\n"
#define viaLONG "; LONG\n\tdq\t%lld\n"
#define viaSTR "; STR\n\tdb\t'%s', 0\n"
#define viaCHAR "; CHAR\n\tdb\t0x%2.2X\n"
#define viaID "; ID\n\tdd\t$%s\n"
#define viaBYTE "; BYTE\n\tresb\t%d\n"
#define viaFLOAT "; FLOAT\n\tdd\t%e\n"
#define viaDOUBLE "; DOUBLE\n\tdq\t%e\n"
#define viaULDCHR "; ULDCHR\n\tmovzx\teax,byte [ecx]\n"
#define viaULD16 "; ULD16\n\tmovzx\teax,word [ecx]\n"
#define viaUDIV "; UDIV\n\tpop\tecx\n\tpop\teax\n\txor\tedx, edx\n\tidiv\tecx\n\tpush\teax\n"
#define viaUMOD "; UMOD\n\tpop\tecx\n\tpop\teax\n\txor\tedx, edx\n\tidiv\tecx\n\tpush\tedx\n"
#define viaUGT "; UGT\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tseta\tcl\n\tmov\t[esp], ecx\n"
#define viaUGE "; UGE\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tsetae\tcl\n\tmov\t[esp], ecx\n"
#define viaULT "; ULT\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tsetb\tcl\n\tmov\t[esp], ecx\n"
#define viaULE "; ULE\n\tpop\teax\n\txor\tecx, ecx\n\tcmp\t[esp], eax\n\tsetbe\tcl\n\tmov\t[esp], ecx\n"
#define viaJEQ "; JEQ\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tje\tnear $%s\n"
#define viaJNE "; JNE\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tjne\tnear $%s\n"
#define viaJGT "; JGT\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tjg\tnear $%s\n"
#define viaJGE "; JGE\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tjge\tnear $%s\n"
#define viaJLT "; JLT\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tjl\tnear $%s\n"
#define viaJLE "; JLE\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tjle\tnear $%s\n"
#define viaJUGT "; JUGT\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tja\tnear $%s\n"
#define viaJUGE "; JUGE\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tjae\tnear $%s\n"
#define viaJULT "; JULT\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tjbe\tnear $%s\n"
#define viaJULE "; JULE\n\tpop\teax\n\tpop\tecx\n\tcmp\tecx, eax\n\tjb\tnear $%s\n"

#define viaLD64 viaLOAD /* who cares if useful data is truncated! */
#define viaST64 "; ST64\n\tpop\tecx\n\tpop\teax\n\tmov\t[ecx], eax\n\tand\teax, 0x80000000\n\tmov\teax, 0\n\tmov\tedx, -1\n\tcmovnz\teax, edx\n\tmov\t[ecx+4], eax\n" /* copy 32bit-sign to upper 32bits */
#define viaULD64 viaLOAD /* who cares if useful data is truncated! */
#define viaLD32 viaLOAD
#define viaST32 viaSTORE
#define viaULD32 viaLOAD

#endif

/* Used as the 2nd argument of viaGLOBL */
#define viaNONE	""	/* unknown global label type */
#ifdef _WIN32
#define viaFUNC	""	/* no symbol types in win32-PE */
#define viaOBJ	""	/* no symbol types in win32-PE */
#elif defined(viaARM)
#define viaFUNC	" @function"	/* should declare in .type */
#define viaOBJ	""
#else
#define viaFUNC	":function"	/* global label is a function */
#define viaOBJ	":object"	/* global label is data */
#endif

#ifndef viaARG1
#define viaARG1 ""
#endif
#ifndef viaARG2
#define viaARG2 ""
#endif
#ifndef viaARG3
#define viaARG3 ""
#endif
#ifndef viaARG4
#define viaARG4 ""
#endif
#ifndef viaARG5
#define viaARG5 ""
#endif
#ifndef viaARG6
#define viaARG6 ""
#endif
#ifndef viaARG1D
#define viaARG1D ""
#endif
#ifndef viaARG2D
#define viaARG2D ""
#endif
#ifndef viaARG3D
#define viaARG3D ""
#endif
#ifndef viaARG4D
#define viaARG4D ""
#endif
#ifndef viaARG5D
#define viaARG5D ""
#endif
#ifndef viaARG6D
#define viaARG6D ""
#endif

#ifndef viaWORD
#define viaWORD 4
#endif

#endif /* _via_h_ */
