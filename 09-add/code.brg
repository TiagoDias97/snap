%{
#include <stdio.h>
#include "node.h"
#include "y.tab.h" /* for STR and INT in isSTR and isINT */
#include "via.h"
extern FILE *yyout;
static int lbl;
static char *mklbl(int n);
static int isSTR(Node *p) { return p->info == STR ? 1 : MAX_COST; }
static int isINT(Node *p) { return p->info == INT ? 1 : MAX_COST; }
%}
%include "y.tab.h"
%term ASSIGN='=' ADD='+'
%%
prog: PROG(decls,instrs)    { fprintf(yyout, viaIMM viaPOP viaRET, 0); } 
decls: NIL                  { fprintf(yyout, viaEXTRN viaEXTRN viaEXTRN, "_println", "_prints", "_printi"); }
decls: DECLS(decls, decl)
decl: ASSIGN(ID,STR)        { fprintf(yyout, viaTEXT viaALIGN viaLABEL viaSTR, p->SUB(0)->value.s, p->SUB(1)->value.s); } 
decl: ASSIGN(ID,INT)        { fprintf(yyout, viaTEXT viaALIGN viaLABEL viaINTEGER, p->SUB(0)->value.s, p->SUB(1)->value.i); } 
instrs: NIL     { fprintf(yyout, viaTEXT viaALIGN viaGLOBL viaLABEL, "_main", viaFUNC, "_main"); }
instrs: INSTRS(instrs, instr)    { /* no code between instructions */ }
instr: PRINT(strs)  { fprintf(yyout, viaCALL, "_println"); }
strs: EXPR(strs,str) { fprintf(yyout, viaCALL viaTRASH, "_prints", 4); }
strs: EXPR(strs,expr) { fprintf(yyout, viaCALL viaTRASH, "_printi", 4); }
strs: str { fprintf(yyout, viaCALL viaTRASH, "_prints", 4); }
strs: expr { fprintf(yyout, viaCALL viaTRASH, "_printi", 4); }
str: ID isSTR { fprintf(yyout, viaADDR, p->value.s); }
str: STR { lbl++; fprintf(yyout, viaRODATA viaALIGN viaLABEL viaSTR viaTEXT viaADDR, mklbl(lbl), p->value.s, mklbl(lbl)); }
expr: ID isINT { fprintf(yyout, viaADDRV, p->value.s); }
expr: INT 1 { fprintf(yyout, viaIMM, p->value.i); }
expr: ADD(expr, expr) 1 { fprintf(yyout, viaADD); }
expr: ADD(INT, INT) 1 { fprintf(yyout, viaIMM, p->SUB(0)->value.i + p->SUB(1)->value.i); }
%%
static char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_#i%d", n);
  return strdup(buf);
}
